	
resultados modelos: RMSE, RMSLE, R2_SCORE, MAX_ERROR, NRMSE, MAE(media error absoluto)
	n = 1000 
	modelo 1:segments = ['urbana', 'banos']
			text_features = ['titulo', 'descripcion']
			features = ['metrostotales', 'metroscubiertos', 'garages']
			muestras: 1000
			[2.29662062e+12 3.01732827e-01 8.81312770e-02 8.68881383e+06,  8.82102217e+05  1.06168494e+06]
			[2.18269769e+12 3.16953998e-01 2.42297016e-01 6.32195404e+06  7.60984016e+05 1.15083473e+06]
	
	modelo 2:segments = ['urbana', 'banos', 'garages']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'metrostotales']
			muestras = 1000
			[ 2.52297273e+12  3.46644777e-01 -1.53921524e-01  6.89306886e+06   9.97970862e+05  9.94523882e+05]
			[2.03256658e+12 3.24971538e-01 1.97870963e-01 4.90539363e+06 7.69872267e+05 1.09967195e+06]
	
	modelo 3:segments = ['urbana', 'garages']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos']
			[2.50511128e+12 3.37543216e-01 1.45591934e-01 9.40555420e+06  1.03116338e+06 9.67104357e+05]
			[1.86373715e+12 3.39480205e-01 4.12398650e-01 7.54357698e+06  7.27359784e+05 1.02940203e+06]
			
	modelo 4:segments = ['urbana', 'garages', 'calurosa']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'mejorciudad']
			[ 2.60535094e+12  2.62088563e-01 -9.49252851e-03  5.19404292e+06   8.05281824e+05  8.30897128e+05]
			[2.11660213e+12 2.73993789e-01 3.48805226e-01 5.48922363e+06 7.02593173e+05 1.04846510e+06]
			
		
	modelo 4:segments = ['urbana', 'garages', 'calurosa', 'parachicos']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'mejorciudad']
			[2.10147518e+12  2.60762875e-01 -1.03330752e+01  4.45853094e+06  7.20899251e+05  7.84443885e+05]
			[2.34497736e+12  3.19578667e-01 -4.49359710e+00  4.85447800e+06  8.37641562e+05  1.13078495e+06]
			
			
	modelo 5:segments = ['urbana', 'calurosa', 'parachicos']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'mejorciudad']
			[1.61318136e+12 1.82979052e-01 2.05563920e-01 5.65910907e+06 5.94559425e+05 7.01126871e+05]
			[2.11548447e+12 3.08931544e-01 3.78514973e-01 5.84975194e+06 7.37391243e+05 1.11810956e+06]
	
	
	modelo 6:segments = ['urbana', 'calurosa', 'parachicos']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'mejorciudad', 'antiguedad']
			predict_column = 'precio'
			carititud_column = 'carititud'
			[1.38845450e+12 1.66326682e-01 1.93673349e-01 4.93885682e+06 5.21765649e+05 6.35498449e+05]			
			[1.83612272e+12 2.89994879e-01 3.19541083e-01 5.15403812e+06 6.67979780e+05 9.74993402e+05]
						
			
	n completo
	modelo 5C:segments = ['urbana', 'calurosa', 'parachicos']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'mejorciudad']
			[1.61318136e+12 1.82979052e-01 2.05563920e-01 5.65910907e+06 5.94559425e+05 7.01126871e+05]
			[1.63361636e+12 2.18245864e-01 3.02213521e-01 4.58345179e+06 5.54826285e+05 8.61807666e+05]
			
		\\ cometario: el modelo de regresion lineal ya habia convergido con n = 1000, mientras que el de nlp, en algunas
		\\ metricas llego incluso a superar al de regresion. PD: nlp no converge todavia.	
		
	modelo 6C:segments = ['urbana', 'calurosa', 'parachicos']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'mejorciudad', 'antiguedad']
			predict_column = 'precio'
			carititud_column = 'carititud'
			[1.38845450e+12 1.66326682e-01 1.93673349e-01 4.93885682e+06 5.21765649e+05 6.35498449e+05]
			[1.72035903e+12 2.34573201e-01 2.75716413e-01 4.72300651e+06 5.87308368e+05 8.98697269e+05]
			
	Modelo I:segments = ['urbana', 'calurosa']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'idzona', 'antiguedad']
			predict_column = 'precio'
			carititud_column = 'carititud'
			[1.63343948e+12 2.00521359e-01 1.93297569e-01 5.99175740e+06  6.20703454e+05 6.35344479e+05]
			[2.20145811e+12 3.25412849e-01 4.31645800e-01 6.61173594e+06  7.43502392e+05 1.15204530e+06]

	Modelo II:segments = ['urbana', 'calurosa']
			text_features = ['titulo', 'descripcion']
			features = ['metroscubiertos', 'idzona', 'mejorciudad']
			predict_column = 'precio'
			carititud_column = 'carititud'
			[7.61165910e+11 1.11172939e-01 1.31226207e-01 3.61657608e+06 3.44261362e+05 3.24729158e+05]
			[1.70022431e+12 2.07646167e-01 3.53726158e-01 5.17879039e+06 5.39310329e+05 8.64375869e+05]
			\\ tiene los menores errores, pero el grafico es malo xq tiene valores negativos muy altos
	Modelo III: segments = ['urbana']
				text_features = ['titulo', 'descripcion']
				features = ['metroscubiertos', 'mejorciudad']
				predict_column = 'precio'
				carititud_column = 'carititud'
				[2.43397022e+12 3.33718100e-01 3.39037292e-01 1.05635130e+07 1.04133337e+06 9.99044176e+05]
				[5.79594530e+11 1.10971059e-01 1.64194328e-01 2.73023427e+06 2.35189239e+05 3.25243854e+05]
				\\ imagen 1
				
	Modelo IV:  segments = ['urbana']
				text_features = ['titulo', 'descripcion']
				features = ['metroscubiertos']
				predict_column = 'precio'
				carititud_column = 'carititud'
				[2.38760603e+12 3.40471124e-01 3.51453045e-01 1.04635726e+07 1.02185537e+06 1.01526205e+06]
				[1.79168091e+12 3.56420056e-01 4.77866557e-01 8.18894732e+06 7.21423278e+05 1.00845811e+06]
				\\ imagen 2

				
			
			
	
			
